Name: K8s Container orchestration

on:
  push:
    paths:
    - 'src/**'

env:
  RELEASE_REVISION: "pr-${{ github.event.pull_request.number }}-${{ github.event.pull_request.head.sha }}"
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: production
  ECR_REPOSITORY: my-cool-application
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}


jobs:                                            
  release:                                       
    name: Release                                
    runs-on: ubuntu-latest                       
    steps:
      - name: Cancel Previous Runs               
        uses: styfle/cancel-workflow-action@0.4.1
        with:                                    
          access_token: ${{ github.token }}      
      - name: Checkout                                  
        uses: actions/checkout@v2                       
        with:                                           
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Configure AWS credentials                          
        uses: aws-actions/configure-aws-credentials@v1           
        with:                                                    
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}        
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR            
        id: login-ecr                        
        uses: aws-actions/amazon-ecr-login@v1
      - name: Set up Docker Buildx                             
        id: buildx                                             
        uses: docker/setup-buildx-action@master                
      - name: Docker cache layers                              
        uses: actions/cache@v2                                 
        with:                                                  
          path: /tmp/.buildx-cache                             
          key: ${{ runner.os }}-single-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-single-buildx       
      - name: Build & Push Image
        working-directory: ./src                                                                                     
        env:                                                                                                          
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}                                                       
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_REVISION }}
        run: |
          docker buildx create --use

          docker buildx build \                                
            --cache-from=type=local,src=/tmp/.buildx-cache \   
            --cache-to=type=local,dest=/tmp/.buildx-cache-new \
            --tag ${{ env.RELEASE_IMAGE }} \                           
            --target release \                                 
            --push \                                           
            .                                                  

          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Deploy to Kubernetes cluster                                                                            
        uses: kodermax/kubectl-aws-eks@master                                                                         
        env:                                                                                                          
          RELEASE_IMAGE: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.RELEASE_REVISION }}
        with:                                                                                                         
          args: set image deployment/my-pod app=${{ env.RELEASE_IMAGE }} --record -n $KUBE_NAMESPACE
      - name: Verify Kubernetes deployment                               
        uses: kodermax/kubectl-aws-eks@master                            
        with:                                                            
          args: rollout status deploy my-pod -n $KUBE_NAMESPACE
      - name: Slack notification                                
        uses: rtCamp/action-slack-notify@master                 
        env:                                                    
          SLACK_CHANNEL: my_cool_channel                   
          SLACK_MESSAGE: 'Just deployed our cool application!'
          SLACK_TITLE: 'Deploy'                         
          SLACK_USERNAME: 'Some Bot'                           
          SLACK_ICON: "[icon URL]"
          SLACK_COLOR: '#228B22'                                
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}       
          MSG_MINIMAL: true 

